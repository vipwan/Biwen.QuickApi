### YamlMime:ManagedReference
items:
- uid: Biwen.QuickApi.ServiceCollectionExtensions
  commentId: T:Biwen.QuickApi.ServiceCollectionExtensions
  id: ServiceCollectionExtensions
  parent: Biwen.QuickApi
  children:
  - Biwen.QuickApi.ServiceCollectionExtensions.AddIf(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  - Biwen.QuickApi.ServiceCollectionExtensions.AddIfElse(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  - Biwen.QuickApi.ServiceCollectionExtensions.AllowLazy(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  - Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  - Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean})
  - Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  - Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.String)
  - Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.String,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  - Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  - Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  - Biwen.QuickApi.ServiceCollectionExtensions.Decorate``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object[])
  langs:
  - csharp
  - vb
  name: ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
  fullName: Biwen.QuickApi.ServiceCollectionExtensions
  type: Class
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.AllowLazy.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> extension methods.
  example: []
  syntax:
    content: >-
      [SuppressType]

      public static class ServiceCollectionExtensions
    content.vb: >-
      <SuppressType>

      Public Module ServiceCollectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  attributes:
  - type: Biwen.QuickApi.Infrastructure.SuppressTypeAttribute
    ctor: Biwen.QuickApi.Infrastructure.SuppressTypeAttribute.#ctor
    arguments: []
- uid: Biwen.QuickApi.ServiceCollectionExtensions.AllowLazy(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.AllowLazy(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AllowLazy(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AllowLazy(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AllowLazy(IServiceCollection)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.AllowLazy(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.AllowLazy.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: 注册允许延迟加载的服务
  example: []
  syntax:
    content: public static IServiceCollection AllowLazy(this IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AllowLazy(services As IServiceCollection) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.AllowLazy*
- uid: Biwen.QuickApi.ServiceCollectionExtensions.AddIf(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.AddIf(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  id: AddIf(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddIf(IServiceCollection, bool, Action<IServiceCollection>)
  nameWithType: ServiceCollectionExtensions.AddIf(IServiceCollection, bool, Action<IServiceCollection>)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.AddIf(Microsoft.Extensions.DependencyInjection.IServiceCollection, bool, System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: >-
    Executes the specified action if the specified <code class="paramref">condition</code> is <code>true</code> which can be

    used to conditionally configure the MVC services.
  example: []
  syntax:
    content: public static IServiceCollection AddIf(this IServiceCollection services, bool condition, Action<IServiceCollection> action)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    - id: condition
      type: System.Boolean
      description: If set to <code>true</code> the action is executed.
    - id: action
      type: System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}
      description: The action used to configure the MVC services.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The same services collection.
    content.vb: Public Shared Function AddIf(services As IServiceCollection, condition As Boolean, action As Action(Of IServiceCollection)) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.AddIf*
  nameWithType.vb: ServiceCollectionExtensions.AddIf(IServiceCollection, Boolean, Action(Of IServiceCollection))
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.AddIf(Microsoft.Extensions.DependencyInjection.IServiceCollection, Boolean, System.Action(Of Microsoft.Extensions.DependencyInjection.IServiceCollection))
  name.vb: AddIf(IServiceCollection, Boolean, Action(Of IServiceCollection))
- uid: Biwen.QuickApi.ServiceCollectionExtensions.AddIfElse(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.AddIfElse(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  id: AddIfElse(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddIfElse(IServiceCollection, bool, Action<IServiceCollection>, Action<IServiceCollection>)
  nameWithType: ServiceCollectionExtensions.AddIfElse(IServiceCollection, bool, Action<IServiceCollection>, Action<IServiceCollection>)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.AddIfElse(Microsoft.Extensions.DependencyInjection.IServiceCollection, bool, System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>, System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: >-
    Executes the specified <code class="paramref">ifAction</code> if the specified <code class="paramref">condition</code> is

    <code>true</code>, otherwise executes the <code class="paramref">elseAction</code>. This can be used to conditionally

    configure the MVC services.
  example: []
  syntax:
    content: public static IServiceCollection AddIfElse(this IServiceCollection services, bool condition, Action<IServiceCollection> ifAction, Action<IServiceCollection> elseAction)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    - id: condition
      type: System.Boolean
      description: >-
        If set to <code>true</code> the <code class="paramref">ifAction</code> is executed, otherwise the
                    <code class="paramref">elseAction</code> is executed.
    - id: ifAction
      type: System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}
      description: The action used to configure the MVC services if the condition is <code>true</code>.
    - id: elseAction
      type: System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}
      description: The action used to configure the MVC services if the condition is <code>false</code>.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The same services collection.
    content.vb: Public Shared Function AddIfElse(services As IServiceCollection, condition As Boolean, ifAction As Action(Of IServiceCollection), elseAction As Action(Of IServiceCollection)) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.AddIfElse*
  nameWithType.vb: ServiceCollectionExtensions.AddIfElse(IServiceCollection, Boolean, Action(Of IServiceCollection), Action(Of IServiceCollection))
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.AddIfElse(Microsoft.Extensions.DependencyInjection.IServiceCollection, Boolean, System.Action(Of Microsoft.Extensions.DependencyInjection.IServiceCollection), System.Action(Of Microsoft.Extensions.DependencyInjection.IServiceCollection))
  name.vb: AddIfElse(IServiceCollection, Boolean, Action(Of IServiceCollection), Action(Of IServiceCollection))
- uid: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  id: ConfigureSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: ConfigureSingleton<TOptions>(IServiceCollection, IConfiguration)
  nameWithType: ServiceCollectionExtensions.ConfigureSingleton<TOptions>(IServiceCollection, IConfiguration)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: Registers <xref href="Microsoft.Extensions.Options.IOptions%601" data-throw-if-not-resolved="false"></xref> and <code class="typeparamref">TOptions</code> to the services container.
  example: []
  syntax:
    content: 'public static IServiceCollection ConfigureSingleton<TOptions>(this IServiceCollection services, IConfiguration configuration) where TOptions : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The configuration.
    typeParameters:
    - id: TOptions
      description: The type of the options.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The same services collection.
    content.vb: Public Shared Function ConfigureSingleton(Of TOptions As Class)(services As IServiceCollection, configuration As IConfiguration) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton*
  nameWithType.vb: ServiceCollectionExtensions.ConfigureSingleton(Of TOptions)(IServiceCollection, IConfiguration)
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton(Of TOptions)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  name.vb: ConfigureSingleton(Of TOptions)(IServiceCollection, IConfiguration)
- uid: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  id: ConfigureSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: ConfigureSingleton<TOptions>(IServiceCollection, IConfiguration, Action<BinderOptions>)
  nameWithType: ServiceCollectionExtensions.ConfigureSingleton<TOptions>(IServiceCollection, IConfiguration, Action<BinderOptions>)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: Registers <xref href="Microsoft.Extensions.Options.IOptions%601" data-throw-if-not-resolved="false"></xref> and <code class="typeparamref">TOptions</code> to the services container.
  example: []
  syntax:
    content: 'public static IServiceCollection ConfigureSingleton<TOptions>(this IServiceCollection services, IConfiguration configuration, Action<BinderOptions> configureBinder) where TOptions : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The configuration.
    - id: configureBinder
      type: System.Action{Microsoft.Extensions.Configuration.BinderOptions}
      description: Used to configure the binder options.
    typeParameters:
    - id: TOptions
      description: The type of the options.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The same services collection.
    content.vb: Public Shared Function ConfigureSingleton(Of TOptions As Class)(services As IServiceCollection, configuration As IConfiguration, configureBinder As Action(Of BinderOptions)) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton*
  nameWithType.vb: ServiceCollectionExtensions.ConfigureSingleton(Of TOptions)(IServiceCollection, IConfiguration, Action(Of BinderOptions))
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton(Of TOptions)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action(Of Microsoft.Extensions.Configuration.BinderOptions))
  name.vb: ConfigureSingleton(Of TOptions)(IServiceCollection, IConfiguration, Action(Of BinderOptions))
- uid: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  id: ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration)
  nameWithType: ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: >-
    Registers <xref href="Microsoft.Extensions.Options.IOptions%601" data-throw-if-not-resolved="false"></xref> and <code class="typeparamref">TOptions</code> to the services container.

    Also runs data annotation validation on application startup.
  example: []
  syntax:
    content: 'public static IServiceCollection ConfigureAndValidateSingleton<TOptions>(this IServiceCollection services, IConfiguration configuration) where TOptions : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The configuration.
    typeParameters:
    - id: TOptions
      description: The type of the options.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The same services collection.
    content.vb: Public Shared Function ConfigureAndValidateSingleton(Of TOptions As Class)(services As IServiceCollection, configuration As IConfiguration) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton*
  nameWithType.vb: ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration)
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  name.vb: ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration)
- uid: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  id: ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration, Action<BinderOptions>)
  nameWithType: ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration, Action<BinderOptions>)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: >-
    Registers <xref href="Microsoft.Extensions.Options.IOptions%601" data-throw-if-not-resolved="false"></xref> and <code class="typeparamref">TOptions</code> to the services container.

    Also runs data annotation validation on application startup.
  example: []
  syntax:
    content: 'public static IServiceCollection ConfigureAndValidateSingleton<TOptions>(this IServiceCollection services, IConfiguration configuration, Action<BinderOptions> configureBinder) where TOptions : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The configuration.
    - id: configureBinder
      type: System.Action{Microsoft.Extensions.Configuration.BinderOptions}
      description: Used to configure the binder options.
    typeParameters:
    - id: TOptions
      description: The type of the options.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The same services collection.
    content.vb: Public Shared Function ConfigureAndValidateSingleton(Of TOptions As Class)(services As IServiceCollection, configuration As IConfiguration, configureBinder As Action(Of BinderOptions)) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton*
  nameWithType.vb: ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration, Action(Of BinderOptions))
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Action(Of Microsoft.Extensions.Configuration.BinderOptions))
  name.vb: ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration, Action(Of BinderOptions))
- uid: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean})
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean})
  id: ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration, Func<TOptions, bool>)
  nameWithType: ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration, Func<TOptions, bool>)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Func<TOptions, bool>)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: >-
    Registers <xref href="Microsoft.Extensions.Options.IOptions%601" data-throw-if-not-resolved="false"></xref> and <code class="typeparamref">TOptions</code> to the services container.

    Also runs data annotation validation and custom validation using the default failure message on application startup.
  example: []
  syntax:
    content: 'public static IServiceCollection ConfigureAndValidateSingleton<TOptions>(this IServiceCollection services, IConfiguration configuration, Func<TOptions, bool> validation) where TOptions : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The configuration.
    - id: validation
      type: System.Func{{TOptions},System.Boolean}
      description: The validation function.
    typeParameters:
    - id: TOptions
      description: The type of the options.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The same services collection.
    content.vb: Public Shared Function ConfigureAndValidateSingleton(Of TOptions As Class)(services As IServiceCollection, configuration As IConfiguration, validation As Func(Of TOptions, Boolean)) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton*
  nameWithType.vb: ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration, Func(Of TOptions, Boolean))
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Func(Of TOptions, Boolean))
  name.vb: ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration, Func(Of TOptions, Boolean))
- uid: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  id: ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration, Func<TOptions, bool>, Action<BinderOptions>)
  nameWithType: ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration, Func<TOptions, bool>, Action<BinderOptions>)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Func<TOptions, bool>, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: >-
    Registers <xref href="Microsoft.Extensions.Options.IOptions%601" data-throw-if-not-resolved="false"></xref> and <code class="typeparamref">TOptions</code> to the services container.

    Also runs data annotation validation and custom validation using the default failure message on application startup.
  example: []
  syntax:
    content: 'public static IServiceCollection ConfigureAndValidateSingleton<TOptions>(this IServiceCollection services, IConfiguration configuration, Func<TOptions, bool> validation, Action<BinderOptions> configureBinder) where TOptions : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The configuration.
    - id: validation
      type: System.Func{{TOptions},System.Boolean}
      description: The validation function.
    - id: configureBinder
      type: System.Action{Microsoft.Extensions.Configuration.BinderOptions}
      description: Used to configure the binder options.
    typeParameters:
    - id: TOptions
      description: The type of the options.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The same services collection.
    content.vb: Public Shared Function ConfigureAndValidateSingleton(Of TOptions As Class)(services As IServiceCollection, configuration As IConfiguration, validation As Func(Of TOptions, Boolean), configureBinder As Action(Of BinderOptions)) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton*
  nameWithType.vb: ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration, Func(Of TOptions, Boolean), Action(Of BinderOptions))
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Func(Of TOptions, Boolean), System.Action(Of Microsoft.Extensions.Configuration.BinderOptions))
  name.vb: ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration, Func(Of TOptions, Boolean), Action(Of BinderOptions))
- uid: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.String)
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.String)
  id: ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.String)
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration, Func<TOptions, bool>, string)
  nameWithType: ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration, Func<TOptions, bool>, string)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Func<TOptions, bool>, string)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: >-
    Registers <xref href="Microsoft.Extensions.Options.IOptions%601" data-throw-if-not-resolved="false"></xref> and <code class="typeparamref">TOptions</code> to the services container.

    Also runs data annotation validation and custom validation on application startup.
  example: []
  syntax:
    content: 'public static IServiceCollection ConfigureAndValidateSingleton<TOptions>(this IServiceCollection services, IConfiguration configuration, Func<TOptions, bool> validation, string failureMessage) where TOptions : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The configuration.
    - id: validation
      type: System.Func{{TOptions},System.Boolean}
      description: The validation function.
    - id: failureMessage
      type: System.String
      description: The failure message to use when validation fails.
    typeParameters:
    - id: TOptions
      description: The type of the options.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The same services collection.
    content.vb: Public Shared Function ConfigureAndValidateSingleton(Of TOptions As Class)(services As IServiceCollection, configuration As IConfiguration, validation As Func(Of TOptions, Boolean), failureMessage As String) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton*
  nameWithType.vb: ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration, Func(Of TOptions, Boolean), String)
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Func(Of TOptions, Boolean), String)
  name.vb: ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration, Func(Of TOptions, Boolean), String)
- uid: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.String,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.String,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  id: ConfigureAndValidateSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Func{``0,System.Boolean},System.String,System.Action{Microsoft.Extensions.Configuration.BinderOptions})
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration, Func<TOptions, bool>, string, Action<BinderOptions>)
  nameWithType: ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(IServiceCollection, IConfiguration, Func<TOptions, bool>, string, Action<BinderOptions>)
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton<TOptions>(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Func<TOptions, bool>, string, System.Action<Microsoft.Extensions.Configuration.BinderOptions>)
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: >-
    Registers <xref href="Microsoft.Extensions.Options.IOptions%601" data-throw-if-not-resolved="false"></xref> and <code class="typeparamref">TOptions</code> to the services container.

    Also runs data annotation validation and custom validation on application startup.
  example: []
  syntax:
    content: 'public static IServiceCollection ConfigureAndValidateSingleton<TOptions>(this IServiceCollection services, IConfiguration configuration, Func<TOptions, bool> validation, string failureMessage, Action<BinderOptions> configureBinder) where TOptions : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services collection.
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: The configuration.
    - id: validation
      type: System.Func{{TOptions},System.Boolean}
      description: The validation function.
    - id: failureMessage
      type: System.String
      description: The failure message to use when validation fails.
    - id: configureBinder
      type: System.Action{Microsoft.Extensions.Configuration.BinderOptions}
      description: Used to configure the binder options.
    typeParameters:
    - id: TOptions
      description: The type of the options.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The same services collection.
    content.vb: Public Shared Function ConfigureAndValidateSingleton(Of TOptions As Class)(services As IServiceCollection, configuration As IConfiguration, validation As Func(Of TOptions, Boolean), failureMessage As String, configureBinder As Action(Of BinderOptions)) As IServiceCollection
  overload: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton*
  nameWithType.vb: ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration, Func(Of TOptions, Boolean), String, Action(Of BinderOptions))
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton(Of TOptions)(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, System.Func(Of TOptions, Boolean), String, System.Action(Of Microsoft.Extensions.Configuration.BinderOptions))
  name.vb: ConfigureAndValidateSingleton(Of TOptions)(IServiceCollection, IConfiguration, Func(Of TOptions, Boolean), String, Action(Of BinderOptions))
- uid: Biwen.QuickApi.ServiceCollectionExtensions.Decorate``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object[])
  commentId: M:Biwen.QuickApi.ServiceCollectionExtensions.Decorate``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object[])
  id: Decorate``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object[])
  isExtensionMethod: true
  parent: Biwen.QuickApi.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: Decorate<TService, TImpl>(IServiceCollection, params object[])
  nameWithType: ServiceCollectionExtensions.Decorate<TService, TImpl>(IServiceCollection, params object[])
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.Decorate<TService, TImpl>(Microsoft.Extensions.DependencyInjection.IServiceCollection, params object[])
  type: Method
  source:
    href: https://github.com/vipwan/Biwen.QuickApi/blob/816b99dc81c4b1410650b2e33b5fc36e7fe54b3a/Biwen.QuickApi/Extensions/ServiceCollectionExtensions.Decorate.cs
  assemblies:
  - Biwen.QuickApi
  namespace: Biwen.QuickApi
  summary: 装饰服务,<code class="typeparamref">TImpl</code>必须有一个构造函数接受<code class="typeparamref">TService</code>类型的参数
  example: []
  syntax:
    content: public static bool Decorate<TService, TImpl>(this IServiceCollection services, params object[] parameters)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    - id: parameters
      type: System.Object[]
      description: ''
    typeParameters:
    - id: TService
    - id: TImpl
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function Decorate(Of TService, TImpl)(services As IServiceCollection, ParamArray parameters As Object()) As Boolean
  overload: Biwen.QuickApi.ServiceCollectionExtensions.Decorate*
  nameWithType.vb: ServiceCollectionExtensions.Decorate(Of TService, TImpl)(IServiceCollection, ParamArray Object())
  fullName.vb: Biwen.QuickApi.ServiceCollectionExtensions.Decorate(Of TService, TImpl)(Microsoft.Extensions.DependencyInjection.IServiceCollection, ParamArray Object())
  name.vb: Decorate(Of TService, TImpl)(IServiceCollection, ParamArray Object())
references:
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Biwen.QuickApi
  commentId: N:Biwen.QuickApi
  isExternal: true
  href: Biwen.html
  name: Biwen.QuickApi
  nameWithType: Biwen.QuickApi
  fullName: Biwen.QuickApi
  spec.csharp:
  - uid: Biwen
    name: Biwen
    isExternal: true
    href: Biwen.html
  - name: .
  - uid: Biwen.QuickApi
    name: QuickApi
    isExternal: true
    href: Biwen.QuickApi.html
  spec.vb:
  - uid: Biwen
    name: Biwen
    isExternal: true
    href: Biwen.html
  - name: .
  - uid: Biwen.QuickApi
    name: QuickApi
    isExternal: true
    href: Biwen.QuickApi.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.DependencyInjection
    name: DependencyInjection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.DependencyInjection
    name: DependencyInjection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Biwen.QuickApi.ServiceCollectionExtensions.AllowLazy*
  commentId: Overload:Biwen.QuickApi.ServiceCollectionExtensions.AllowLazy
  isExternal: true
  href: Biwen.QuickApi.ServiceCollectionExtensions.html#Biwen_QuickApi_ServiceCollectionExtensions_AllowLazy_Microsoft_Extensions_DependencyInjection_IServiceCollection_
  name: AllowLazy
  nameWithType: ServiceCollectionExtensions.AllowLazy
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.AllowLazy
- uid: Biwen.QuickApi.ServiceCollectionExtensions.AddIf*
  commentId: Overload:Biwen.QuickApi.ServiceCollectionExtensions.AddIf
  isExternal: true
  href: Biwen.QuickApi.ServiceCollectionExtensions.html#Biwen_QuickApi_ServiceCollectionExtensions_AddIf_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Boolean_System_Action_Microsoft_Extensions_DependencyInjection_IServiceCollection__
  name: AddIf
  nameWithType: ServiceCollectionExtensions.AddIf
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.AddIf
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}
  commentId: T:System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<IServiceCollection>
  nameWithType: Action<IServiceCollection>
  fullName: System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>
  nameWithType.vb: Action(Of IServiceCollection)
  fullName.vb: System.Action(Of Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: Action(Of IServiceCollection)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
    name: IServiceCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
    name: IServiceCollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Biwen.QuickApi.ServiceCollectionExtensions.AddIfElse*
  commentId: Overload:Biwen.QuickApi.ServiceCollectionExtensions.AddIfElse
  isExternal: true
  href: Biwen.QuickApi.ServiceCollectionExtensions.html#Biwen_QuickApi_ServiceCollectionExtensions_AddIfElse_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Boolean_System_Action_Microsoft_Extensions_DependencyInjection_IServiceCollection__System_Action_Microsoft_Extensions_DependencyInjection_IServiceCollection__
  name: AddIfElse
  nameWithType: ServiceCollectionExtensions.AddIfElse
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.AddIfElse
- uid: Microsoft.Extensions.Options.IOptions`1
  commentId: T:Microsoft.Extensions.Options.IOptions`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options.ioptions-1
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options.ioptions-1
  - name: <
  - name: TOptions
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.options.ioptions-1
  - name: (
  - name: Of
  - name: " "
  - name: TOptions
  - name: )
- uid: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton*
  commentId: Overload:Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton
  isExternal: true
  href: Biwen.QuickApi.ServiceCollectionExtensions.html#Biwen_QuickApi_ServiceCollectionExtensions_ConfigureSingleton__1_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  name: ConfigureSingleton
  nameWithType: ServiceCollectionExtensions.ConfigureSingleton
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureSingleton
- uid: Microsoft.Extensions.Configuration.IConfiguration
  commentId: T:Microsoft.Extensions.Configuration.IConfiguration
  parent: Microsoft.Extensions.Configuration
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration.iconfiguration
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: Microsoft.Extensions.Configuration.IConfiguration
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Configuration
    name: Configuration
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Configuration
    name: Configuration
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration
- uid: System.Action{Microsoft.Extensions.Configuration.BinderOptions}
  commentId: T:System.Action{Microsoft.Extensions.Configuration.BinderOptions}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<BinderOptions>
  nameWithType: Action<BinderOptions>
  fullName: System.Action<Microsoft.Extensions.Configuration.BinderOptions>
  nameWithType.vb: Action(Of BinderOptions)
  fullName.vb: System.Action(Of Microsoft.Extensions.Configuration.BinderOptions)
  name.vb: Action(Of BinderOptions)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: Microsoft.Extensions.Configuration.BinderOptions
    name: BinderOptions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration.binderoptions
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Extensions.Configuration.BinderOptions
    name: BinderOptions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.configuration.binderoptions
  - name: )
- uid: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton*
  commentId: Overload:Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton
  isExternal: true
  href: Biwen.QuickApi.ServiceCollectionExtensions.html#Biwen_QuickApi_ServiceCollectionExtensions_ConfigureAndValidateSingleton__1_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  name: ConfigureAndValidateSingleton
  nameWithType: ServiceCollectionExtensions.ConfigureAndValidateSingleton
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.ConfigureAndValidateSingleton
- uid: System.Func{{TOptions},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TOptions, bool>
  nameWithType: Func<TOptions, bool>
  fullName: System.Func<TOptions, bool>
  nameWithType.vb: Func(Of TOptions, Boolean)
  fullName.vb: System.Func(Of TOptions, Boolean)
  name.vb: Func(Of TOptions, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TOptions
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TOptions
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Biwen.QuickApi.ServiceCollectionExtensions.Decorate*
  commentId: Overload:Biwen.QuickApi.ServiceCollectionExtensions.Decorate
  isExternal: true
  href: Biwen.QuickApi.ServiceCollectionExtensions.html#Biwen_QuickApi_ServiceCollectionExtensions_Decorate__2_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Object___
  name: Decorate
  nameWithType: ServiceCollectionExtensions.Decorate
  fullName: Biwen.QuickApi.ServiceCollectionExtensions.Decorate
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
