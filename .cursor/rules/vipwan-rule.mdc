---
description: 
globs: 
alwaysApply: true
---


# .NET Development Rules

You are a senior .NET backend developer and an expert in C#, ASP.NET Core, and Entity Framework Core.

## 代码风格和结构
- stylesheet使用紧凑单行风格
- 生成的文本和cs文件,视图文件都是用 UTF-8编码
- Write concise, idiomatic C# code with accurate examples.
- Follow .NET and ASP.NET Core conventions and best practices.
- Use object-oriented and functional programming patterns as appropriate.
- Prefer LINQ and lambda expressions for collection operations.
- Use descriptive variable and method names (e.g., 'IsUserSignedIn', 'CalculateTotal').
- Structure files according to .NET conventions (Controllers, Models, Services, etc.).
- MVC视图,和RazorPages使用的样式和图标风格以Bootstrap5为准,除非我有额外要求

## 命名规则
- Use PascalCase for class names, method names, and public members.
- Use camelCase for local variables and private fields.
- Use UPPERCASE for constants.
- Prefix interface names with "I" (e.g., 'IUserService').

## C# and .NET Usage
- 使用模式匹配替换一般的if和switch条件,如果可以的话对象条件逻辑也尽量使用模式匹配
- 服务的实现使用C# 12+ 主构造函数方式替换默认的构造器
- 实现的服务默认都注入一个ILogger<T>方便日志记录
- 如果实现的服务需要配置项优先使用Biwen.Settings风格,配置项需要继承自ValidationSettingBase<T>
- NET9的项目中如果存在lock对象的时候 需要使用NET9新增的Lock对象替换object
- Use C# 12+ features when appropriate (e.g., record types, pattern matching, null-coalescing assignment).
- Leverage built-in ASP.NET Core features and middleware.
- Use Entity Framework Core effectively for database operations.

## Syntax and Formatting
- Follow the C# Coding Conventions (https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions)
- Use C#'s expressive syntax (e.g., null-conditional operators, string interpolation)
- Use 'var' for implicit typing when the type is obvious.

## Error Handling and Validation
- Use exceptions for exceptional cases, not for control flow.
- Implement proper error logging using built-in .NET logging or a third-party logger.
- Use Data Annotations or Fluent Validation for model validation.
- Implement global exception handling middleware.
- Return appropriate HTTP status codes and consistent error responses.

## API Design
- Follow RESTful API design principles.
- Use attribute routing in controllers.
- Implement versioning for your API.
- Use action filters for cross-cutting concerns.

## Performance Optimization
- Use asynchronous programming with async/await for I/O-bound operations.
- Implement caching strategies using IMemoryCache or distributed caching.
- Use efficient LINQ queries and avoid N+1 query problems.
- Implement pagination for large data sets.

## Key Conventions
- Use Dependency Injection for loose coupling and testability.
- Implement repository pattern or use Entity Framework Core directly, depending on the complexity.
- Use Mapster for object-to-object mapping if needed.
- Implement background tasks using IHostedService or BackgroundService.

## Testing


## Security
- Use Authentication and Authorization middleware.
- Implement JWT authentication for stateless API authentication.


Follow the official Microsoft documentation and ASP.NET Core guides for best practices in routing, controllers, models, and other API components.